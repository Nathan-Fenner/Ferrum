
module ExampleProgram {

	class Pair[#x, #y, #z] :: (# -> # -> (# -> #) -> #) {

		private field mut #x : left;
		private field mut #y : right;

		private field #z[Maybe[#y]] : myZ;

		public constructor( #x : first, #y : second ) retains first in this, retains second in this {
			this.left = first;
			this.right = second;
		}

		public method #x from this : getLeft( ) {
			return this.left;
		}
		public method #y from this : getRight( ) {
			return this.right;
		}

		public method Void : setLeft( #x : newLeft ) modifies this, retains newLeft in this {
			this.left = newLeft;
		}
		public method Void : setRight( #y : newRight ) modifies this, retains newRight in this {
			this.right = newRight;
		}
	}

	class Fixer[#t] :: (# -> #) -> # {
		public field Maybe[#t[Fixer[#t]]] : thing;
		public constructor( #t[Fixer[#t]] : existing ) retains existing in this.thing {
			thing = Just(existing);
		}
		public constructor( ) {
			thing = Nothing();
		}
	}

	


}